/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.0 public/AvatorModel/Model.glb -o src/components/Avator.jsx -r public 
https://models.readyplayer.me/66c4d855ee652b88d7de32ca.glb?morphTargets=mouthSmile,ARKit,Oculus Visemes
https://models.readyplayer.me/66ba74c63f3b5915e2c58266.glb?morphTargets=mouthSmile,ARKit,Oculus Visemes
*/

import { useState, useEffect, useRef, useMemo,useCallback } from "react";
import { useFrame, useLoader } from "@react-three/fiber";
import {useControls} from "leva"
import { useGLTF, useFBX, useAnimations } from "@react-three/drei";
import * as THREE from "three";

export function Model(props) {
   // Manage controls for audio and script
   const corresponding = {
    A: "viseme_PP",
    B: "viseme_kk",
    C: "viseme_I",
    D: "viseme_AA",
    E: "viseme_O",
    F: "viseme_U",
    G: "viseme_FF",
    H: "viseme_TH",
    X: "viseme_PP",
  };
   const { playAudio, script } = useControls({
    playAudio: false,
    script: {
      value: 'welcome',
      options: ['welcome', 'DuborSub'],
    },
  });

  // Memoize audio to prevent reinitialization
  const audio = useMemo(() => new Audio(`/Audio/${script}.ogg`), [script]);
  const jsonFile = useLoader(THREE.FileLoader,`Audio/${script}.json`)
  const lipsync = JSON.parse(jsonFile);

  useFrame(async ()=>{
    const currentTime = audio.currentTime
    //console.log(nodes.Wolf3D_Head.morphTargetDictionary)
    Object.values(corresponding).forEach((value)=>{
      nodes.Wolf3D_Head.morphTargetInfluences[nodes.Wolf3D_Head.morphTargetDictionary[corresponding[value]]] = 0
      nodes.Wolf3D_Teeth.morphTargetInfluences[nodes.Wolf3D_Teeth.morphTargetDictionary[corresponding[value]]] = 0
    })
    for(let i = 0; i<lipsync.mouthCues.length; i++){
      const mouthCues = lipsync.mouthCues[i];
      if(currentTime >= mouthCues.start && currentTime <= mouthCues.end){
        console.log(mouthCues.value)
        nodes.Wolf3D_Head.morphTargetInfluences[nodes.Wolf3D_Head.morphTargetDictionary[corresponding[mouthCues.value]]] = 1
        nodes.Wolf3D_Teeth.morphTargetInfluences[nodes.Wolf3D_Teeth.morphTargetDictionary[corresponding[mouthCues.value]]] = 1
        setTimeout(()=> { openAndclose(mouthCues.value); }, ( mouthCues.end - mouthCues.start));
      }
    }
  })
  async function openAndclose(value){
    nodes.Wolf3D_Head.morphTargetInfluences[nodes.Wolf3D_Head.morphTargetDictionary[corresponding[value]]] = 0
    nodes.Wolf3D_Teeth.morphTargetInfluences[nodes.Wolf3D_Teeth.morphTargetDictionary[corresponding[value]]] = 0

  }
  useEffect(() => {
    if (playAudio) {
      audio.play();
    } else {
      audio.pause();
    }
  }, [playAudio, script, audio]);

  const group = useRef();
  const { nodes, materials } =  useGLTF('/AvatorModel/Model1.glb');

  const [animation, setAnimation] = useState('Idle');
  const { animations: animationIdle } = useFBX('/AvatorModel/Idle (3).fbx');
  animationIdle[0].name = 'Idle';

  const { actions } = useAnimations(animationIdle, group);
  useEffect(() => {

    if (actions[animation]) {
      const action = actions[animation];
      action.reset().fadeIn(0.5).play();

      return () => {
        action.reset().fadeOut(0.5);
      };
    }
  }, [animation]);

  
  useCallback((event) => {
    event.stopPropagation(); 
    console.log('Central panel clicked');
  }, []);
  

  return (
    <group {...props} dispose={null} ref={group}>
      <primitive object={nodes.Hips} />
      <skinnedMesh
        geometry={nodes.Wolf3D_Hair.geometry}
        material={materials.Wolf3D_Hair}
        skeleton={nodes.Wolf3D_Hair.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Glasses.geometry}
        material={materials.Wolf3D_Glasses}
        skeleton={nodes.Wolf3D_Glasses.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Body.geometry}
        material={materials.Wolf3D_Body}
        skeleton={nodes.Wolf3D_Body.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Outfit_Bottom.geometry}
        material={materials.Wolf3D_Outfit_Bottom}
        skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Outfit_Footwear.geometry}
        material={materials["aleksandr@readyplayer"]}
        skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Outfit_Top.geometry}
        material={materials.Wolf3D_Outfit_Top}
        skeleton={nodes.Wolf3D_Outfit_Top.skeleton}
      />
      <skinnedMesh
        name="EyeLeft"
        geometry={nodes.EyeLeft.geometry}
        material={materials.Wolf3D_Eye}
        skeleton={nodes.EyeLeft.skeleton}
        morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary}
        morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences}
      />
      <skinnedMesh
        name="EyeRight"
        geometry={nodes.EyeRight.geometry}
        material={materials.Wolf3D_Eye}
        skeleton={nodes.EyeRight.skeleton}
        morphTargetDictionary={nodes.EyeRight.morphTargetDictionary}
        morphTargetInfluences={nodes.EyeRight.morphTargetInfluences}
      />
      <skinnedMesh
        name="Wolf3D_Head"
        geometry={nodes.Wolf3D_Head.geometry}
        material={materials.Wolf3D_Skin}
        skeleton={nodes.Wolf3D_Head.skeleton}
        morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary}
        morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences}
      />
      <skinnedMesh
        name="Wolf3D_Teeth"
        geometry={nodes.Wolf3D_Teeth.geometry}
        material={materials.Wolf3D_Teeth}
        skeleton={nodes.Wolf3D_Teeth.skeleton}
        morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary}
        morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences}
      />
    </group>
  );
}

useGLTF.preload("/AvatorModel/Model1.glb");
